<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang-数组、切片、字符串</title>
    <url>/2022/05/16/Golang-%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.vimsky.com%2Fwp-content%2Fuploads%2F2018%2F11%2Farray.jpg&refer=http%3A%2F%2Fwww.vimsky.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655473157&t=3a2ea4ffa193cc2f39ed3109e85a3823" alt="img"></p>
<h3 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h3><p>数组是一个由固定类型的特定类型元素组成的序列，它可以由0~n个元素组成。数组的长度和类型都是数组的一部分，因此不同长度或类型组成的数组都属于不同类型，如<code>[5]int</code>和<code>[10]int</code>是属于不同类型的。由于不同长度的数组因为类型不同无法直接赋值，因此在Golang中很少使用数组，取而代之的是切片（slice）。</p>
<h3 id="数组定义的方式"><a href="#数组定义的方式" class="headerlink" title="数组定义的方式"></a>数组定义的方式</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span> <span class="comment">//定义长度为3的int型数组, 元素为&#123;0, 1, 2&#125;</span></span><br><span class="line"><span class="keyword">var</span> b [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">//定义长度为3的int型数组, 元素为&#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="keyword">var</span> c [...]<span class="type">int</span>&#123;<span class="number">1</span>:<span class="number">2</span>, <span class="number">3</span>:<span class="number">7</span>&#125; <span class="comment">//定义长度为4的int型数组, 元素为&#123;0, 2, 0, 7&#125;</span></span><br></pre></td></tr></table></figure>

<p>第一种方式是定义一个数组变量的最基本的方式，数组的长度明确指定，数组中的每个元素都以零值初始化。</p>
<p>第二种方式定义数组，可以在定义的时候顺序指定全部元素的初始化值，数组的长度根据初始化元素的数目自动计算。</p>
<p>第三种方式是以索引的方式来初始化数组的元素，数组的长度以出现的最大的索引为准，没有明确初始化的元素依然用0值初始化。</p>
<h3 id="数组的内存结构"><a href="#数组的内存结构" class="headerlink" title="数组的内存结构"></a>数组的内存结构</h3><p>假如我们声明一个长度为5的数组<code>var arr [5]int</code>,我们来看看这个数组在内存中的结构是怎么样的。</p>
<img src="https://tech.souyunku.com/wp-content/uploads/2020/8/82/232415/21/62_1.png" alt="62_1.png" style="zoom:50%;" />

<p>上图是一个Go语言数组的内存结构。在这个数组中，我们声明的类型为<code>int32</code>,也就是说数组中的每个元素在内存中占4个字节，通过数组中每个元素在内存中16进制地址可知，数组中后一个元素的地址比前一个元素的地址大4个字节，这个4字节正好是<code>int32</code>类型元素占用的内存大小。由此我们可以得出以下结论：</p>
<ol>
<li><p>数组中元素在内存中的地址是连续的；</p>
</li>
<li><p>当声明数组时所有的元素都会被自动初始化为数组类型的默认值；</p>
</li>
<li><p>数组的内存地址就是数组中第一个元素(下标为0的元素)的地址；</p>
</li>
</ol>
<h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><p>Go语言中数组是值语义。一个数组变量即表示整个数组，它并不是隐式的指向第一个元素的指针（比如C语言的数组），而是一个完整的值。当一个数组变量被赋值或者被传递的时候，实际上会复制整个数组。如果数组较大的话，数组的赋值也会有较大的开销。为了避免复制数组带来的开销，可以传递一个指向数组的指针，但是数组指针并不是数组。</p>
<p><strong>遍历数组</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;a[%d]=%d &quot;</span>, i, a[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>访问数组</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	b := &amp;a</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a[1]=%d &amp;&amp; b[1]=%d&quot;</span>, a[<span class="number">1</span>], b[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
</search>
